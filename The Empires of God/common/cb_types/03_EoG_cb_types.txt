## normal scopes(including posttitle scopes) ##
# ROOT = receiver
# FROM = giver
# <no scope change> = attacker or receiver
## title scopes ##
# ROOT = receiver
# FROM = giver
# <no scope change> = thirdparty landed title	
#
# the following effects/triggers exists (example execution order: on_success->on_success_title->on_success_posttitle):
# is_valid, is_valid_title, on_add, on_add_title, on_add_posttitle, on_success, on_success_title, on_success_posttitle, on_fail, on_fail_title, on_fail_posttitle, on_reverse_demand, on_reverse_demand_title, on_reverse_demand_posttitle
#
# Added on_attacker_leader_death, on_defender_leader_death and on_thirdparty_death, which all trigger when corresponding character dies
# These three all have war scopes, which currently has the following scope changes: 
# attacker, defender, thirdparty(only valid if thirdparty character is involved), thirdparty_title(only valid if thirdparty title is involved)
#
# ai_will_do: modifies value AI places on the CB compared to other CBs (default: 1)
# can_use_gui: If otherwise valid, the CB is listed in the Diplo View, but you can't declare war unless 'can_use_gui' is also valid (also shows a trigger tooltip.)
#

# Special Casus Belli for a Pretender of the Western Roman Empire to become the true successor
# If the usurper is "The Commune of Rome" the titular title should be destroyed
pretender_of_wre_against_rightfull_successor = {
	name = CB_NAME_PRETENDER_OF_WRE_AGAINST_SUCCESSOR
	war_name = WAR_NAME_WRE_SUCCESSOR
	sprite = 1
	truce_days = 3650
	hostile_against_others = yes
	can_ask_to_join_war = yes
	is_permanent = yes
	#check_all_titles = yes # if permanent, setting this to true will check against all of someones titles, including vassal held titles

	#press_claim = yes

	can_use = {
		ROOT = { trait = pretender_successor_state_of_wre }
		FROM = { trait = successor_state_of_wre }
		# Avoid that the loser delares war again during the Peace conference itself
		NOT = { has_character_flag = joins_the_conference_of_peace }
	}

	is_valid = {
		ROOT = {
			trait = pretender_successor_state_of_wre
		}
	}

	# On success the pretender become the officially recognized successor
	# of WRE, the loser (HRE) loses the trait and becomes a pretender in
	# turn, the HRE the title is destroyed and becomes "Empire of Germania"
	on_success = {
		ROOT = {
			remove_trait = pretender_successor_state_of_wre
			add_trait = successor_state_of_wre
			set_character_flag = won_successor_state_of_wre_war
			prestige = 1000
			if = {
				limit = {
					AND = {
						ROOT = { has_landed_title = e_spqr }
						FROM = { has_landed_title = e_hre }
					}
				}
				set_character_flag = spqr_vs_hre
			}

			if = {
				limit = {
					AND = {
						ROOT = { has_landed_title = e_ere }
						FROM = { has_landed_title = e_hre }
					}
				}
				set_character_flag = ere_vs_hre
			}

			character_event = { id = EoG.5 }

		}

		FROM = {
			remove_trait = successor_state_of_wre
			add_trait = pretender_successor_state_of_wre
			set_character_flag = lost_successor_state_of_wre_war
		}
	}

	on_reverse_demand = {
		ROOT = {
			prestige = -1000
			transfer_scaled_wealth = {
				to = FROM
				value = 4.0
			}
		}
		any_defender = {
			limit = { character = FROM }
			participation_scaled_prestige = 150
		}
		any_defender = {
			limit = { NOT = { character = FROM } }
			hidden_tooltip = { participation_scaled_prestige = 150 }
		}
	}

	on_attacker_leader_death = {
		end_war = invalid
	}

	attacker_ai_victory_worth = {
		factor = -1 # always accept
	}
	
	attacker_ai_defeat_worth = {
		factor = 100
	}

	defender_ai_victory_worth = {
		factor = -1 # always accept
	}
	
	defender_ai_defeat_worth = {
		factor = 100
	}
}

pretender_of_ere_against_rightfull_successor = {
	name = CB_NAME_PRETENDER_OF_ERE_AGAINST_SUCCESSOR
	war_name = WAR_NAME_ERE_SUCCESSOR
	sprite = 1
	truce_days = 3650
	hostile_against_others = yes
	can_ask_to_join_war = yes
	is_permanent = yes
	#check_all_titles = yes # if permanent, setting this to true will check against all of someones titles, including vassal held titles

	#press_claim = yes

	can_use = {
		ROOT = { trait = pretender_successor_state_of_ere }
		FROM = { trait = successor_state_of_ere }
		# Avoid that the loser delares war again during the Peace conference itself
		NOT = { has_character_flag = joins_the_conference_of_peace }
	}

	is_valid = {
		ROOT = {
			trait = pretender_successor_state_of_ere
		}
	}

	# On success the pretender become the officially recognized successor
	# of WRE, the loser (HRE) loses the trait and becomes a pretender in
	# turn, the HRE the title is destroyed and becomes "Empire of Germania"
	on_success = {
		ROOT = {
			remove_trait = pretender_successor_state_of_ere
			add_trait = successor_state_of_ere
			set_character_flag = won_successor_state_of_ere_war
			prestige = 1000
			
			if = {
				limit = {
					FROM = { has_landed_title = e_byzantium }
				}
				set_global_flag = byzantium_lost_pretender_ere_war	
			}

			if = {
				limit = {
					AND = {
						ROOT = { has_landed_title = e_bulgaria }
						FROM = { has_landed_title = e_byzantium }
					}
				}
				set_character_flag = bulgaria_vs_byzantium
			}

			if = {
				limit = {
					AND = {
						ROOT = { has_landed_title = e_serbia }
						FROM = { has_landed_title = e_byzantium }
					}
				}
				set_character_flag = serbia_vs_byzantium
			}

			if = {
				limit = {
					AND = {
						ROOT = { has_landed_title = e_latin_empire }
						FROM = { has_landed_title = e_byzantium }
					}
				}
				set_character_flag = latin_empire_vs_byzantium
			}
			if = {
				limit = {
					AND = {
						ROOT = { has_landed_title = e_russia }
						FROM = { has_landed_title = e_byzantium }
					}
				}
				set_character_flag = russia_vs_byzantium
			}


			character_event = { id = EoG.505 }
		}

		FROM = {
			remove_trait = successor_state_of_ere
			add_trait = pretender_successor_state_of_ere
			set_character_flag = lost_successor_state_of_ere_war
		}
	}

	on_reverse_demand = {
		ROOT = {
			prestige = -1000
			transfer_scaled_wealth = {
				to = FROM
				value = 4.0
			}
		}
		any_defender = {
			limit = { character = FROM }
			participation_scaled_prestige = 150
		}
		any_defender = {
			limit = { NOT = { character = FROM } }
			hidden_tooltip = { participation_scaled_prestige = 150 }
		}
	}

	on_attacker_leader_death = {
		end_war = invalid
	}

	attacker_ai_victory_worth = {
		factor = -1 # always accept
	}
	
	attacker_ai_defeat_worth = {
		factor = 100
	}

	defender_ai_victory_worth = {
		factor = -1 # always accept
	}
	
	defender_ai_defeat_worth = {
		factor = 100
	}
}
